// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protofiles

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IdeaCrawlerClient is the client API for IdeaCrawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdeaCrawlerClient interface {
	AddDomainAndListen(ctx context.Context, in *DomainOpt, opts ...grpc.CallOption) (IdeaCrawler_AddDomainAndListenClient, error)
	AddPages(ctx context.Context, opts ...grpc.CallOption) (IdeaCrawler_AddPagesClient, error)
	CancelJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Status, error)
	GetAnalyzedURLs(ctx context.Context, in *JobID, opts ...grpc.CallOption) (IdeaCrawler_GetAnalyzedURLsClient, error)
	GetWorkerID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkerID, error)
}

type ideaCrawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewIdeaCrawlerClient(cc grpc.ClientConnInterface) IdeaCrawlerClient {
	return &ideaCrawlerClient{cc}
}

func (c *ideaCrawlerClient) AddDomainAndListen(ctx context.Context, in *DomainOpt, opts ...grpc.CallOption) (IdeaCrawler_AddDomainAndListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &IdeaCrawler_ServiceDesc.Streams[0], "/protofiles.IdeaCrawler/AddDomainAndListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &ideaCrawlerAddDomainAndListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IdeaCrawler_AddDomainAndListenClient interface {
	Recv() (*PageHTML, error)
	grpc.ClientStream
}

type ideaCrawlerAddDomainAndListenClient struct {
	grpc.ClientStream
}

func (x *ideaCrawlerAddDomainAndListenClient) Recv() (*PageHTML, error) {
	m := new(PageHTML)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ideaCrawlerClient) AddPages(ctx context.Context, opts ...grpc.CallOption) (IdeaCrawler_AddPagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IdeaCrawler_ServiceDesc.Streams[1], "/protofiles.IdeaCrawler/AddPages", opts...)
	if err != nil {
		return nil, err
	}
	x := &ideaCrawlerAddPagesClient{stream}
	return x, nil
}

type IdeaCrawler_AddPagesClient interface {
	Send(*PageRequest) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type ideaCrawlerAddPagesClient struct {
	grpc.ClientStream
}

func (x *ideaCrawlerAddPagesClient) Send(m *PageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ideaCrawlerAddPagesClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ideaCrawlerClient) CancelJob(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protofiles.IdeaCrawler/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ideaCrawlerClient) GetAnalyzedURLs(ctx context.Context, in *JobID, opts ...grpc.CallOption) (IdeaCrawler_GetAnalyzedURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &IdeaCrawler_ServiceDesc.Streams[2], "/protofiles.IdeaCrawler/GetAnalyzedURLs", opts...)
	if err != nil {
		return nil, err
	}
	x := &ideaCrawlerGetAnalyzedURLsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IdeaCrawler_GetAnalyzedURLsClient interface {
	Recv() (*UrlList, error)
	grpc.ClientStream
}

type ideaCrawlerGetAnalyzedURLsClient struct {
	grpc.ClientStream
}

func (x *ideaCrawlerGetAnalyzedURLsClient) Recv() (*UrlList, error) {
	m := new(UrlList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ideaCrawlerClient) GetWorkerID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkerID, error) {
	out := new(WorkerID)
	err := c.cc.Invoke(ctx, "/protofiles.IdeaCrawler/GetWorkerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdeaCrawlerServer is the server API for IdeaCrawler service.
// All implementations must embed UnimplementedIdeaCrawlerServer
// for forward compatibility
type IdeaCrawlerServer interface {
	AddDomainAndListen(*DomainOpt, IdeaCrawler_AddDomainAndListenServer) error
	AddPages(IdeaCrawler_AddPagesServer) error
	CancelJob(context.Context, *JobID) (*Status, error)
	GetAnalyzedURLs(*JobID, IdeaCrawler_GetAnalyzedURLsServer) error
	GetWorkerID(context.Context, *empty.Empty) (*WorkerID, error)
	mustEmbedUnimplementedIdeaCrawlerServer()
}

// UnimplementedIdeaCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedIdeaCrawlerServer struct {
}

func (UnimplementedIdeaCrawlerServer) AddDomainAndListen(*DomainOpt, IdeaCrawler_AddDomainAndListenServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDomainAndListen not implemented")
}
func (UnimplementedIdeaCrawlerServer) AddPages(IdeaCrawler_AddPagesServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPages not implemented")
}
func (UnimplementedIdeaCrawlerServer) CancelJob(context.Context, *JobID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedIdeaCrawlerServer) GetAnalyzedURLs(*JobID, IdeaCrawler_GetAnalyzedURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAnalyzedURLs not implemented")
}
func (UnimplementedIdeaCrawlerServer) GetWorkerID(context.Context, *empty.Empty) (*WorkerID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerID not implemented")
}
func (UnimplementedIdeaCrawlerServer) mustEmbedUnimplementedIdeaCrawlerServer() {}

// UnsafeIdeaCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdeaCrawlerServer will
// result in compilation errors.
type UnsafeIdeaCrawlerServer interface {
	mustEmbedUnimplementedIdeaCrawlerServer()
}

func RegisterIdeaCrawlerServer(s grpc.ServiceRegistrar, srv IdeaCrawlerServer) {
	s.RegisterService(&IdeaCrawler_ServiceDesc, srv)
}

func _IdeaCrawler_AddDomainAndListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainOpt)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdeaCrawlerServer).AddDomainAndListen(m, &ideaCrawlerAddDomainAndListenServer{stream})
}

type IdeaCrawler_AddDomainAndListenServer interface {
	Send(*PageHTML) error
	grpc.ServerStream
}

type ideaCrawlerAddDomainAndListenServer struct {
	grpc.ServerStream
}

func (x *ideaCrawlerAddDomainAndListenServer) Send(m *PageHTML) error {
	return x.ServerStream.SendMsg(m)
}

func _IdeaCrawler_AddPages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IdeaCrawlerServer).AddPages(&ideaCrawlerAddPagesServer{stream})
}

type IdeaCrawler_AddPagesServer interface {
	SendAndClose(*Status) error
	Recv() (*PageRequest, error)
	grpc.ServerStream
}

type ideaCrawlerAddPagesServer struct {
	grpc.ServerStream
}

func (x *ideaCrawlerAddPagesServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ideaCrawlerAddPagesServer) Recv() (*PageRequest, error) {
	m := new(PageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IdeaCrawler_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdeaCrawlerServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.IdeaCrawler/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdeaCrawlerServer).CancelJob(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdeaCrawler_GetAnalyzedURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdeaCrawlerServer).GetAnalyzedURLs(m, &ideaCrawlerGetAnalyzedURLsServer{stream})
}

type IdeaCrawler_GetAnalyzedURLsServer interface {
	Send(*UrlList) error
	grpc.ServerStream
}

type ideaCrawlerGetAnalyzedURLsServer struct {
	grpc.ServerStream
}

func (x *ideaCrawlerGetAnalyzedURLsServer) Send(m *UrlList) error {
	return x.ServerStream.SendMsg(m)
}

func _IdeaCrawler_GetWorkerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdeaCrawlerServer).GetWorkerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.IdeaCrawler/GetWorkerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdeaCrawlerServer).GetWorkerID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IdeaCrawler_ServiceDesc is the grpc.ServiceDesc for IdeaCrawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdeaCrawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.IdeaCrawler",
	HandlerType: (*IdeaCrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelJob",
			Handler:    _IdeaCrawler_CancelJob_Handler,
		},
		{
			MethodName: "GetWorkerID",
			Handler:    _IdeaCrawler_GetWorkerID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddDomainAndListen",
			Handler:       _IdeaCrawler_AddDomainAndListen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddPages",
			Handler:       _IdeaCrawler_AddPages_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAnalyzedURLs",
			Handler:       _IdeaCrawler_GetAnalyzedURLs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/ideacrawler.proto",
}
