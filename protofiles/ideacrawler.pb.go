//************************************************************************
//
// Copyright 2018 Ideas2IT Technology Services Private Limited.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//*********************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.4
// source: protofiles/ideacrawler.proto

package protofiles

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PageReqType int32

const (
	PageReqType_GET PageReqType = 0
	// Sends a HEAD request to first identify page is text/html before downloading
	// If we are unsure link will send back large gzip file, etc. which we want to
	// avoid.
	PageReqType_HEAD      PageReqType = 1
	PageReqType_BUILTINJS PageReqType = 2
	PageReqType_JSCRIPT   PageReqType = 3
)

// Enum value maps for PageReqType.
var (
	PageReqType_name = map[int32]string{
		0: "GET",
		1: "HEAD",
		2: "BUILTINJS",
		3: "JSCRIPT",
	}
	PageReqType_value = map[string]int32{
		"GET":       0,
		"HEAD":      1,
		"BUILTINJS": 2,
		"JSCRIPT":   3,
	}
)

func (x PageReqType) Enum() *PageReqType {
	p := new(PageReqType)
	*p = x
	return p
}

func (x PageReqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageReqType) Descriptor() protoreflect.EnumDescriptor {
	return file_protofiles_ideacrawler_proto_enumTypes[0].Descriptor()
}

func (PageReqType) Type() protoreflect.EnumType {
	return &file_protofiles_ideacrawler_proto_enumTypes[0]
}

func (x PageReqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageReqType.Descriptor instead.
func (PageReqType) EnumDescriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{0}
}

type WorkerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *WorkerID) Reset() {
	*x = WorkerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerID) ProtoMessage() {}

func (x *WorkerID) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerID.ProtoReflect.Descriptor instead.
func (*WorkerID) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Status) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type KVP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KVP) Reset() {
	*x = KVP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KVP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KVP) ProtoMessage() {}

func (x *KVP) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KVP.ProtoReflect.Descriptor instead.
func (*KVP) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{2}
}

func (x *KVP) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KVP) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DomainOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedUrl string `protobuf:"bytes,1,opt,name=seedUrl,proto3" json:"seedUrl,omitempty"`
	// crawl delay in seconds
	MinDelay int32 `protobuf:"varint,2,opt,name=minDelay,proto3" json:"minDelay,omitempty"`
	MaxDelay int32 `protobuf:"varint,3,opt,name=maxDelay,proto3" json:"maxDelay,omitempty"`
	// don't follow any pages,  just send back responses for the received URLs.
	NoFollow bool `protobuf:"varint,4,opt,name=noFollow,proto3" json:"noFollow,omitempty"`
	// only pages matching reqUrlRegexp will be shipped back to the client.
	// only matching pages will be saved to s3 as well.
	CallbackUrlRegexp string `protobuf:"bytes,5,opt,name=callbackUrlRegexp,proto3" json:"callbackUrlRegexp,omitempty"`
	// only pages matching followUrlRegexp will be followed and sublinks added to fetcher.
	FollowUrlRegexp       string `protobuf:"bytes,6,opt,name=followUrlRegexp,proto3" json:"followUrlRegexp,omitempty"`
	MaxConcurrentRequests int32  `protobuf:"varint,7,opt,name=maxConcurrentRequests,proto3" json:"maxConcurrentRequests,omitempty"`
	//TODO
	Useragent string `protobuf:"bytes,8,opt,name=useragent,proto3" json:"useragent,omitempty"`
	Impolite  bool   `protobuf:"varint,9,opt,name=impolite,proto3" json:"impolite,omitempty"`
	//TODO
	Depth          int32 `protobuf:"varint,10,opt,name=depth,proto3" json:"depth,omitempty"`
	ThreadsPerSite int64 `protobuf:"varint,11,opt,name=ThreadsPerSite,proto3" json:"ThreadsPerSite,omitempty"`
	// Callback check order -
	//   (1) - callbackUrlRegexp
	//   (2) - callbackXpathMatch
	//   (3) - callbackXpathRegexp
	//  Any one has to match.
	// provide multiple xpaths as keys and expected values as value.  Pages are
	// sent back to client only if all values are found in page.
	CallbackXpathMatch  []*KVP `protobuf:"bytes,14,rep,name=callbackXpathMatch,proto3" json:"callbackXpathMatch,omitempty"`
	CallbackXpathRegexp []*KVP `protobuf:"bytes,15,rep,name=callbackXpathRegexp,proto3" json:"callbackXpathRegexp,omitempty"`
	//  in seconds, it is the time to wait for a new
	// page, before stopping the job; affects workerIdleTTL of fetchbot.
	// min value is 600, it is also default.
	MaxIdleTime        int64    `protobuf:"varint,16,opt,name=maxIdleTime,proto3" json:"maxIdleTime,omitempty"`
	FollowOtherDomains bool     `protobuf:"varint,17,opt,name=followOtherDomains,proto3" json:"followOtherDomains,omitempty"`
	KeepDomains        []string `protobuf:"bytes,18,rep,name=keepDomains,proto3" json:"keepDomains,omitempty"`
	DropDomains        []string `protobuf:"bytes,19,rep,name=dropDomains,proto3" json:"dropDomains,omitempty"`
	DomainDropPriority bool     `protobuf:"varint,20,opt,name=domainDropPriority,proto3" json:"domainDropPriority,omitempty"`
	// safe url normalizations happen by default. below is only for a few unsafe ones.
	// for list of safe normalizations: https://github.com/PuerkitoBio/purell/blob/master/purell.go#L59
	// remove index.php, etc,  fragments #section, +FlagsUsuallySafeGreedy from above link
	UnsafeNormalizeURL bool `protobuf:"varint,21,opt,name=unsafeNormalizeURL,proto3" json:"unsafeNormalizeURL,omitempty"`
	Login              bool `protobuf:"varint,22,opt,name=login,proto3" json:"login,omitempty"`
	// currently not possible, assumes false. uses chrome debugging protocol directly.
	LoginUsingSelenium bool   `protobuf:"varint,23,opt,name=loginUsingSelenium,proto3" json:"loginUsingSelenium,omitempty"`
	LoginUrl           string `protobuf:"bytes,24,opt,name=loginUrl,proto3" json:"loginUrl,omitempty"`
	// for username, password fields, other form data to send on post request
	LoginPayload []*KVP `protobuf:"bytes,25,rep,name=loginPayload,proto3" json:"loginPayload,omitempty"`
	// if there are hidden fields in the page that need to be scraped before login
	LoginParseFields bool `protobuf:"varint,26,opt,name=loginParseFields,proto3" json:"loginParseFields,omitempty"`
	// key is key of hidden fields to parse from form, value is the xpath of field to scrape.
	LoginParseXpath []*KVP `protobuf:"bytes,27,rep,name=loginParseXpath,proto3" json:"loginParseXpath,omitempty"`
	// to check if login succeeded, provide xpath as key, and expected value as value.
	// for example,  after login, xpath of top right corner,  and username as value.
	// if the xpath is not there of if there is no value match,  then we probably didn't login.
	LoginSuccessCheck *KVP `protobuf:"bytes,28,opt,name=loginSuccessCheck,proto3" json:"loginSuccessCheck,omitempty"`
	// checks login state after downloading each page, using check defined in 'loginSuccessCheck'
	CheckLoginAfterEachPage bool `protobuf:"varint,29,opt,name=checkLoginAfterEachPage,proto3" json:"checkLoginAfterEachPage,omitempty"`
	// javascript for login in chrome browser.
	LoginJS string `protobuf:"bytes,30,opt,name=loginJS,proto3" json:"loginJS,omitempty"`
	// whether to use chrome, location of chrome binary
	Chrome       bool   `protobuf:"varint,31,opt,name=chrome,proto3" json:"chrome,omitempty"`
	ChromeBinary string `protobuf:"bytes,32,opt,name=chromeBinary,proto3" json:"chromeBinary,omitempty"`
	DomLoadTime  int32  `protobuf:"varint,33,opt,name=domLoadTime,proto3" json:"domLoadTime,omitempty"`
	// check if this network interface is still active before every request.
	NetworkIface       string `protobuf:"bytes,34,opt,name=networkIface,proto3" json:"networkIface,omitempty"`
	CancelOnDisconnect bool   `protobuf:"varint,35,opt,name=cancelOnDisconnect,proto3" json:"cancelOnDisconnect,omitempty"`
	// if true,  sends a HEAD request first ensure content is text/html before sending GET request.
	CheckContent bool `protobuf:"varint,36,opt,name=checkContent,proto3" json:"checkContent,omitempty"`
	// if prefetch flag is true, downloads resources like img, css, png, svg, js associated with the actual page to mimic browser behaviour.
	Prefetch bool `protobuf:"varint,37,opt,name=prefetch,proto3" json:"prefetch,omitempty"`
	// pages matching anchor text regexp will be shipped back to the client.
	CallbackAnchorTextRegexp string `protobuf:"bytes,39,opt,name=callbackAnchorTextRegexp,proto3" json:"callbackAnchorTextRegexp,omitempty"`
	// If true ships the page at depth 0, else only pattern matched urls are shipped
	CallbackSeedUrl bool `protobuf:"varint,40,opt,name=callbackSeedUrl,proto3" json:"callbackSeedUrl,omitempty"`
	// mimetype
	Mimetype string `protobuf:"bytes,41,opt,name=mimetype,proto3" json:"mimetype,omitempty"`
}

func (x *DomainOpt) Reset() {
	*x = DomainOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainOpt) ProtoMessage() {}

func (x *DomainOpt) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainOpt.ProtoReflect.Descriptor instead.
func (*DomainOpt) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{3}
}

func (x *DomainOpt) GetSeedUrl() string {
	if x != nil {
		return x.SeedUrl
	}
	return ""
}

func (x *DomainOpt) GetMinDelay() int32 {
	if x != nil {
		return x.MinDelay
	}
	return 0
}

func (x *DomainOpt) GetMaxDelay() int32 {
	if x != nil {
		return x.MaxDelay
	}
	return 0
}

func (x *DomainOpt) GetNoFollow() bool {
	if x != nil {
		return x.NoFollow
	}
	return false
}

func (x *DomainOpt) GetCallbackUrlRegexp() string {
	if x != nil {
		return x.CallbackUrlRegexp
	}
	return ""
}

func (x *DomainOpt) GetFollowUrlRegexp() string {
	if x != nil {
		return x.FollowUrlRegexp
	}
	return ""
}

func (x *DomainOpt) GetMaxConcurrentRequests() int32 {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return 0
}

func (x *DomainOpt) GetUseragent() string {
	if x != nil {
		return x.Useragent
	}
	return ""
}

func (x *DomainOpt) GetImpolite() bool {
	if x != nil {
		return x.Impolite
	}
	return false
}

func (x *DomainOpt) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *DomainOpt) GetThreadsPerSite() int64 {
	if x != nil {
		return x.ThreadsPerSite
	}
	return 0
}

func (x *DomainOpt) GetCallbackXpathMatch() []*KVP {
	if x != nil {
		return x.CallbackXpathMatch
	}
	return nil
}

func (x *DomainOpt) GetCallbackXpathRegexp() []*KVP {
	if x != nil {
		return x.CallbackXpathRegexp
	}
	return nil
}

func (x *DomainOpt) GetMaxIdleTime() int64 {
	if x != nil {
		return x.MaxIdleTime
	}
	return 0
}

func (x *DomainOpt) GetFollowOtherDomains() bool {
	if x != nil {
		return x.FollowOtherDomains
	}
	return false
}

func (x *DomainOpt) GetKeepDomains() []string {
	if x != nil {
		return x.KeepDomains
	}
	return nil
}

func (x *DomainOpt) GetDropDomains() []string {
	if x != nil {
		return x.DropDomains
	}
	return nil
}

func (x *DomainOpt) GetDomainDropPriority() bool {
	if x != nil {
		return x.DomainDropPriority
	}
	return false
}

func (x *DomainOpt) GetUnsafeNormalizeURL() bool {
	if x != nil {
		return x.UnsafeNormalizeURL
	}
	return false
}

func (x *DomainOpt) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

func (x *DomainOpt) GetLoginUsingSelenium() bool {
	if x != nil {
		return x.LoginUsingSelenium
	}
	return false
}

func (x *DomainOpt) GetLoginUrl() string {
	if x != nil {
		return x.LoginUrl
	}
	return ""
}

func (x *DomainOpt) GetLoginPayload() []*KVP {
	if x != nil {
		return x.LoginPayload
	}
	return nil
}

func (x *DomainOpt) GetLoginParseFields() bool {
	if x != nil {
		return x.LoginParseFields
	}
	return false
}

func (x *DomainOpt) GetLoginParseXpath() []*KVP {
	if x != nil {
		return x.LoginParseXpath
	}
	return nil
}

func (x *DomainOpt) GetLoginSuccessCheck() *KVP {
	if x != nil {
		return x.LoginSuccessCheck
	}
	return nil
}

func (x *DomainOpt) GetCheckLoginAfterEachPage() bool {
	if x != nil {
		return x.CheckLoginAfterEachPage
	}
	return false
}

func (x *DomainOpt) GetLoginJS() string {
	if x != nil {
		return x.LoginJS
	}
	return ""
}

func (x *DomainOpt) GetChrome() bool {
	if x != nil {
		return x.Chrome
	}
	return false
}

func (x *DomainOpt) GetChromeBinary() string {
	if x != nil {
		return x.ChromeBinary
	}
	return ""
}

func (x *DomainOpt) GetDomLoadTime() int32 {
	if x != nil {
		return x.DomLoadTime
	}
	return 0
}

func (x *DomainOpt) GetNetworkIface() string {
	if x != nil {
		return x.NetworkIface
	}
	return ""
}

func (x *DomainOpt) GetCancelOnDisconnect() bool {
	if x != nil {
		return x.CancelOnDisconnect
	}
	return false
}

func (x *DomainOpt) GetCheckContent() bool {
	if x != nil {
		return x.CheckContent
	}
	return false
}

func (x *DomainOpt) GetPrefetch() bool {
	if x != nil {
		return x.Prefetch
	}
	return false
}

func (x *DomainOpt) GetCallbackAnchorTextRegexp() string {
	if x != nil {
		return x.CallbackAnchorTextRegexp
	}
	return ""
}

func (x *DomainOpt) GetCallbackSeedUrl() bool {
	if x != nil {
		return x.CallbackSeedUrl
	}
	return false
}

func (x *DomainOpt) GetMimetype() string {
	if x != nil {
		return x.Mimetype
	}
	return ""
}

type JobID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *JobID) Reset() {
	*x = JobID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobID) ProtoMessage() {}

func (x *JobID) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobID.ProtoReflect.Descriptor instead.
func (*JobID) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{4}
}

func (x *JobID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type PageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID      *JobID      `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Reqtype    PageReqType `protobuf:"varint,2,opt,name=reqtype,proto3,enum=protofiles.PageReqType" json:"reqtype,omitempty"`
	Url        string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Js         string      `protobuf:"bytes,4,opt,name=js,proto3" json:"js,omitempty"`
	NoCallback bool        `protobuf:"varint,5,opt,name=noCallback,proto3" json:"noCallback,omitempty"` // works only for js requests
	MetaStr    string      `protobuf:"bytes,6,opt,name=metaStr,proto3" json:"metaStr,omitempty"`
}

func (x *PageRequest) Reset() {
	*x = PageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRequest) ProtoMessage() {}

func (x *PageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRequest.ProtoReflect.Descriptor instead.
func (*PageRequest) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{5}
}

func (x *PageRequest) GetJobID() *JobID {
	if x != nil {
		return x.JobID
	}
	return nil
}

func (x *PageRequest) GetReqtype() PageReqType {
	if x != nil {
		return x.Reqtype
	}
	return PageReqType_GET
}

func (x *PageRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PageRequest) GetJs() string {
	if x != nil {
		return x.Js
	}
	return ""
}

func (x *PageRequest) GetNoCallback() bool {
	if x != nil {
		return x.NoCallback
	}
	return false
}

func (x *PageRequest) GetMetaStr() string {
	if x != nil {
		return x.MetaStr
	}
	return ""
}

type PageHTML struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error          string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	JobID          *JobID `protobuf:"bytes,3,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Url            string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Httpstatuscode int32  `protobuf:"varint,5,opt,name=httpstatuscode,proto3" json:"httpstatuscode,omitempty"`
	Content        []byte `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	MetaStr        string `protobuf:"bytes,7,opt,name=metaStr,proto3" json:"metaStr,omitempty"`
	UrlDepth       int32  `protobuf:"varint,8,opt,name=urlDepth,proto3" json:"urlDepth,omitempty"`
	AnchorText     string `protobuf:"bytes,9,opt,name=anchorText,proto3" json:"anchorText,omitempty"`
}

func (x *PageHTML) Reset() {
	*x = PageHTML{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageHTML) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageHTML) ProtoMessage() {}

func (x *PageHTML) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageHTML.ProtoReflect.Descriptor instead.
func (*PageHTML) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{6}
}

func (x *PageHTML) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PageHTML) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PageHTML) GetJobID() *JobID {
	if x != nil {
		return x.JobID
	}
	return nil
}

func (x *PageHTML) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PageHTML) GetHttpstatuscode() int32 {
	if x != nil {
		return x.Httpstatuscode
	}
	return 0
}

func (x *PageHTML) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PageHTML) GetMetaStr() string {
	if x != nil {
		return x.MetaStr
	}
	return ""
}

func (x *PageHTML) GetUrlDepth() int32 {
	if x != nil {
		return x.UrlDepth
	}
	return 0
}

func (x *PageHTML) GetAnchorText() string {
	if x != nil {
		return x.AnchorText
	}
	return ""
}

type UrlList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      []string `protobuf:"bytes,1,rep,name=url,proto3" json:"url,omitempty"`
	MetaStr  string   `protobuf:"bytes,2,opt,name=metaStr,proto3" json:"metaStr,omitempty"`
	UrlDepth int32    `protobuf:"varint,3,opt,name=urlDepth,proto3" json:"urlDepth,omitempty"`
}

func (x *UrlList) Reset() {
	*x = UrlList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protofiles_ideacrawler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlList) ProtoMessage() {}

func (x *UrlList) ProtoReflect() protoreflect.Message {
	mi := &file_protofiles_ideacrawler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlList.ProtoReflect.Descriptor instead.
func (*UrlList) Descriptor() ([]byte, []int) {
	return file_protofiles_ideacrawler_proto_rawDescGZIP(), []int{7}
}

func (x *UrlList) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *UrlList) GetMetaStr() string {
	if x != nil {
		return x.MetaStr
	}
	return ""
}

func (x *UrlList) GetUrlDepth() int32 {
	if x != nil {
		return x.UrlDepth
	}
	return 0
}

var File_protofiles_ideacrawler_proto protoreflect.FileDescriptor

var file_protofiles_ideacrawler_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x69, 0x64, 0x65,
	0x61, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a,
	0x03, 0x4b, 0x56, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfe, 0x0b, 0x0a,
	0x09, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x6f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x58, 0x70, 0x61, 0x74, 0x68, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4b, 0x56, 0x50, 0x52, 0x12, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x58, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x41, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x58, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4b, 0x56, 0x50, 0x52, 0x13, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x58, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x72, 0x6f,
	0x70, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x73, 0x61,
	0x66, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65,
	0x6e, 0x69, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x6e, 0x69, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0c, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4b, 0x56,
	0x50, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x58, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x4b, 0x56, 0x50, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x58, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4b,
	0x56, 0x50, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x61, 0x63, 0x68, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x61, 0x63, 0x68, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4a, 0x53, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4a, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x4c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x6d, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x66, 0x61, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x18, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x64, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x17, 0x0a,
	0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xc5, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6a, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x6a, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x43, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x22, 0x8d,
	0x02, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x48, 0x54, 0x4d, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x22, 0x51,
	0x0a, 0x07, 0x55, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x61, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x2a, 0x3c, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x4a, 0x53,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x03, 0x32,
	0xc5, 0x02, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x61, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x6e, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x74, 0x1a, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x48, 0x54,
	0x4d, 0x4c, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62,
	0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x73, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x55, 0x72, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protofiles_ideacrawler_proto_rawDescOnce sync.Once
	file_protofiles_ideacrawler_proto_rawDescData = file_protofiles_ideacrawler_proto_rawDesc
)

func file_protofiles_ideacrawler_proto_rawDescGZIP() []byte {
	file_protofiles_ideacrawler_proto_rawDescOnce.Do(func() {
		file_protofiles_ideacrawler_proto_rawDescData = protoimpl.X.CompressGZIP(file_protofiles_ideacrawler_proto_rawDescData)
	})
	return file_protofiles_ideacrawler_proto_rawDescData
}

var file_protofiles_ideacrawler_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protofiles_ideacrawler_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protofiles_ideacrawler_proto_goTypes = []interface{}{
	(PageReqType)(0),    // 0: protofiles.PageReqType
	(*WorkerID)(nil),    // 1: protofiles.WorkerID
	(*Status)(nil),      // 2: protofiles.Status
	(*KVP)(nil),         // 3: protofiles.KVP
	(*DomainOpt)(nil),   // 4: protofiles.DomainOpt
	(*JobID)(nil),       // 5: protofiles.JobID
	(*PageRequest)(nil), // 6: protofiles.PageRequest
	(*PageHTML)(nil),    // 7: protofiles.PageHTML
	(*UrlList)(nil),     // 8: protofiles.UrlList
	(*empty.Empty)(nil), // 9: google.protobuf.Empty
}
var file_protofiles_ideacrawler_proto_depIdxs = []int32{
	3,  // 0: protofiles.DomainOpt.callbackXpathMatch:type_name -> protofiles.KVP
	3,  // 1: protofiles.DomainOpt.callbackXpathRegexp:type_name -> protofiles.KVP
	3,  // 2: protofiles.DomainOpt.loginPayload:type_name -> protofiles.KVP
	3,  // 3: protofiles.DomainOpt.loginParseXpath:type_name -> protofiles.KVP
	3,  // 4: protofiles.DomainOpt.loginSuccessCheck:type_name -> protofiles.KVP
	5,  // 5: protofiles.PageRequest.jobID:type_name -> protofiles.JobID
	0,  // 6: protofiles.PageRequest.reqtype:type_name -> protofiles.PageReqType
	5,  // 7: protofiles.PageHTML.jobID:type_name -> protofiles.JobID
	4,  // 8: protofiles.IdeaCrawler.AddDomainAndListen:input_type -> protofiles.DomainOpt
	6,  // 9: protofiles.IdeaCrawler.AddPages:input_type -> protofiles.PageRequest
	5,  // 10: protofiles.IdeaCrawler.CancelJob:input_type -> protofiles.JobID
	5,  // 11: protofiles.IdeaCrawler.GetAnalyzedURLs:input_type -> protofiles.JobID
	9,  // 12: protofiles.IdeaCrawler.GetWorkerID:input_type -> google.protobuf.Empty
	7,  // 13: protofiles.IdeaCrawler.AddDomainAndListen:output_type -> protofiles.PageHTML
	2,  // 14: protofiles.IdeaCrawler.AddPages:output_type -> protofiles.Status
	2,  // 15: protofiles.IdeaCrawler.CancelJob:output_type -> protofiles.Status
	8,  // 16: protofiles.IdeaCrawler.GetAnalyzedURLs:output_type -> protofiles.UrlList
	1,  // 17: protofiles.IdeaCrawler.GetWorkerID:output_type -> protofiles.WorkerID
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_protofiles_ideacrawler_proto_init() }
func file_protofiles_ideacrawler_proto_init() {
	if File_protofiles_ideacrawler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protofiles_ideacrawler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KVP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageHTML); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protofiles_ideacrawler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protofiles_ideacrawler_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protofiles_ideacrawler_proto_goTypes,
		DependencyIndexes: file_protofiles_ideacrawler_proto_depIdxs,
		EnumInfos:         file_protofiles_ideacrawler_proto_enumTypes,
		MessageInfos:      file_protofiles_ideacrawler_proto_msgTypes,
	}.Build()
	File_protofiles_ideacrawler_proto = out.File
	file_protofiles_ideacrawler_proto_rawDesc = nil
	file_protofiles_ideacrawler_proto_goTypes = nil
	file_protofiles_ideacrawler_proto_depIdxs = nil
}
